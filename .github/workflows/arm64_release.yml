name: Publish Release ARM64
run-name: Publish release ${{ inputs.tag }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        required: true

jobs:
  checkout-full-src:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.21'
      - run: go version
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          ref: ${{ inputs.tag }}

      - name: Download wing vendor
        run: |
          git submodule update --init --recursive
          export GOMODCACHE="${PWD}"/go-mod
          go mod download -modcacherw
          cd dae-core && go mod download -modcacherw && cd ..
          find "$GOMODCACHE" -maxdepth 1 ! -name "cache" ! -name "go-mod" -exec rm -rf {} \;
          sed -i 's/#export GOMODCACHE=$(PWD)\/go-mod/export GOMODCACHE=$(PWD)\/go-mod/' Makefile
        working-directory: wing

      - name: Create full source ZIP archive and Signature
        run: |
          zip -9vr daed-full-src.zip . -x .git/\*

      - name: Upload artifact - full source
        uses: actions/upload-artifact@v4
        with:
          name: daed-full-src.zip
          path: daed-full-src.zip

  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - uses: pnpm/action-setup@v3.0.0
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: latest

      - name: Build
        run: |
          pnpm install
          pnpm build

      - name: Upload artifact - web
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: dist

  build-bundle:
    needs: [build-web]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux]
        goarch: [arm64]
      fail-fast: false

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      CGO_ENABLED: 0

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.21'
      - run: go version
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0

      - name: Get the version
        id: get_version
        env:
          REF: ${{ inputs.tag }}
        run: |
          tag=${REF}
          version=${tag}
          package_version="${tag:1}"
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV

      - name: Get the filename
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH\"].friendlyName" -r < install/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, RELEASE_NAME: $_NAME"
          echo "BUNDLE_NAME=daed-$_NAME" >> $GITHUB_OUTPUT

      - name: Download artifact - web
        uses: actions/download-artifact@v4
        with:
          name: web
          path: dist/

      - name: make
        run: |
          mkdir -p ./bundled/
          export VERSION=${{ steps.get_version.outputs.VERSION }}
          export GOFLAGS="-trimpath -modcacherw"
          export OUTPUT=bundled/${{ steps.get_filename.outputs.BUNDLE_NAME }}
          make
          cp ./install/daed.service ./bundled/
          cp ./install/daed.desktop ./bundled/
          cp -r ./install/icons/ ./bundled/
          curl -L -o ./bundled/geoip.dat https://github.com/v2rayA/dist-v2ray-rules-dat/raw/master/geoip.dat
          curl -L -o ./bundled/geosite.dat https://github.com/v2rayA/dist-v2ray-rules-dat/raw/master/geosite.dat

      - name: Upload artifact - bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get_filename.outputs.BUNDLE_NAME }}
          path: bundled/*

      - name: Build Linux packages
        run: |
          mkdir -p ./output_packages/
          sudo apt install -y libarchive-tools rpm
          sudo gem install fpm -v 1.15.1
          pushd bundled || exit 1
          for package_manager in deb rpm pacman; do
            if [ "$package_manager" == 'pacman' ];then
              package_arch='aarch64'
            elif [ "$package_manager" == 'rpm' ];then
              package_arch='aarch64'
            elif [ "$package_manager" == 'deb' ];then
              package_arch='arm64'
            fi
            fpm -s dir -t "$package_manager" -a $package_arch --version "$PACKAGE_VERSION" \
              --url 'https://github.com/daeuniverse/daed' --description "daed, A Modern Dashboard For dae." \
              --maintainer "daed@dae.v2raya.org" --name daed --license 'MIT AGPL' \
              --package daed-linux-$GOARCH.$package_manager \
              --after-install ../install/package_after_install.sh \
              --after-remove ../install/package_after_remove.sh \
              ./geoip.dat=/usr/share/daed/geoip.dat ./geosite.dat=/usr/share/daed/geosite.dat \
              ./daed.service=/usr/lib/systemd/system/daed.service \
              ./daed.desktop=/usr/share/applications/daed.desktop \
              ./icons/16x16.png=/usr/share/icons/hicolor/16x16/apps/daed.png \
              ./icons/32x32.png=/usr/share/icons/hicolor/32x32/apps/daed.png \
              ./icons/64x64.png=/usr/share/icons/hicolor/64x64/apps/daed.png \
              ./icons/128x128.png=/usr/share/icons/hicolor/128x128/apps/daed.png \
              ./icons/256x256.png=/usr/share/icons/hicolor/256x256/apps/daed.png \
              ./icons/512x512.png=/usr/share/icons/hicolor/512x512/apps/daed.png \
              ./icons/1024x1024.png=/usr/share/icons/hicolor/1024x1024/apps/daed.png \
              ./${{ steps.get_filename.outputs.BUNDLE_NAME }}=/usr/bin/daed
          done
          popd || exit 1
          cp bundled/daed-linux-$GOARCH.deb ./output_packages/installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.deb
          cp bundled/daed-linux-$GOARCH.rpm ./output_packages/installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.rpm
          cp bundled/daed-linux-$GOARCH.pacman ./output_packages/installer-${{ steps.get_filename.outputs.BUNDLE_NAME }}.pkg.tar.zst
          ls ./output_packages/ | grep -E ".deb|.rpm|.pkg.tar.zst"

      - name: Upload Linux packages
        uses: nanoufo/action-upload-artifacts-and-release-assets@v2.0
        with:
          path: |
            output_packages/*

  upload-release:
    needs: [checkout-full-src, build-bundle]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release/

      - name: Prepare files for upload
        run: |
          cp release/*/*.deb ./
          cp release/*/*.rpm ./
          cp release/*/*.pkg.tar.zst ./
          cp release/*/*.zip ./
          pushd release
          zip -9vr ../web.zip web/*
          for zip_file in $(ls | grep -E "^daed-linux*");do
              pushd $zip_file
              zip -9r ../../"$zip_file".zip ./*
              popd
          done
          popd
          for package in $(ls | grep -E ".deb|.pkg.tar.zst|.rpm|.zip");do
              echo "$(md5sum $package)""  md5" >> $package.dgst
              echo "$(shasum -a 1 $package)""  sha1" >> $package.dgst
              echo "$(shasum -a 256 $package)""  sha256" >> $package.dgst
              echo "$(shasum -a 512 $package)""  sha512" >> $package.dgst
          done
          echo "Show files are going to upload..."
          ls -lh | grep -E ".deb|.pkg.tar.zst|.rpm|.zip"

      - name: Upload Release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          Latest_Releases=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/daeuniverse/daed/releases/latest | jq -r '.tag_name')
          Latest_tag=${{ inputs.tag }}
          if [ "$Latest_Releases" != "$Latest_tag" ]; then
            gh release create ${{ inputs.tag }} -t ${{ inputs.tag }} --generate-notes
          fi
          files=$(ls | grep -E ".deb|.pkg.tar.zst|.rpm|.zip")
          gh release upload ${{ inputs.tag }} $files
